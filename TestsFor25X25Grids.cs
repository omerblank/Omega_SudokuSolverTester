using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using OmegaSudokuSolver;

namespace OmegaSudokuTester
{
    [TestClass]
    public class TestsFor25X25Grids
    {
        [TestMethod]
        public void TestEmpty25X25()
        {
            string board
            string expectedSolution = "123456789:;<=>?@ABCDEFGHIDBGH<15;FI48:EC3?>962@=7AF;8EI2?@CG15DAB4=H7<39:6>9:=>@3DA<H276GF15I8E4?B;C?A67C4>E=B39IH@2:F;G158<DE1234IH5896D<:>;G@A?7BC=FCDIF>@16G?=357H829<B;4AE:=@9BH:27;>F1A8G645ECD3I?<;<AG?D3=EFC4B9I71:H>6258@5678:<4BAC?2@;ED3=IFG1>9H4I123?B958DE><:GCA6;@H7F=GH@<9FI16=BC357ED2?8:>4A;:E?CA>@27;HF1=8BI459<G3D6>8F=;CG3D<IA469H71@:?E25B75D6BHE4:A@G2?;<>3F=I81C934E1289?H5:=;F<A6CB@>IDG7AFCIDG=>167@E35:982HB;<4?H>:@GBFD278I?1A=;<45C693E<=B?8;CI3E9HG46>FD17A:@25695;7A:<4@>BC2D?EG3IF=H182349156F?D<:8C=I@;>AH7EBGIC>AE78GB15;9D3FH6:2=<?@4BGHDF9;CI2E>7@15<?=48A6:3@?<:=EAH>3G6FB4987D15C;I287;56=<:@4A?HI2CBEG39DF>1";
            string actual = OmegaSudokuSolver.Sudoku.Solve(new Board(board));
            Assert.AreEqual(expectedSolution, actual);
        }

        [TestMethod]
        public void Test1For25X25()
        {
            string board = "80000007000?0100@3040<0000000008040000300070002000;03000000080000=0500619000020001000000000000000004000000000000000000>00000000000000000A20000000000000000000000000000000=00000000000000000000000B3000000000:00000000000000000000000000000000000000000000C40000000>000000000000000000000;000000000000000000000000D50000000000000000000000000000@0000000000000000000000000E600000000000000000=000000000000000000000000000000000000F70000000000000>00000000000000000000000000000000000000000G00000000000000000000080000000000090000000000000@00000000000000000000000000000000000000000H0000000000000000000000000000000000000=000000@000000000000000";
            string expectedSolution = "8EFGD2>7;IH?916B@3:4=<AC569ACIH8E4FG5:3=1;7D<>2?@B;437>@?BCD82EF<=G5AH619I::<2=531G69>@B;A?FECI87HD41@?BH5:<=A47DCI826>93EFG;=3B;CG95E>6A2@7D?1F8H4:<I7?4<81FHI2E9;D5C:@6=B3GA>AHDI2C=6<;:GF?47E>B39581@561F:B@38?C<HI>A4G92E=;7DEG9>@:7AD4=31B8H<I;5F62?C478:E9I=><FH52163C@AG;DB?2=6H<;A1?CB47G35D98:I@>EFIB@39D52FE;C=:?4H<G>1A786C;>A16G:3H@8I<DFB?E72954=?5GDF4B@78AE6>9I=;21CH3:<F8C2?=39H5I6GE@<>41D7:B;AG:E4=8;?26<>AHB9CF7@5DI313D71;AC>:B?=842G5HIE@F<69<AH@6FDI175:39;28=?B4CE>G>I59B<E4@G1DC7F:6A3;?8=H2DC:8G>H;9=2146E3IB<FA?@57B><6A728513;@=GE9:4?DICFH@2IE4?6CA:DF<5H>78=G;B193HF;?7E<DB39I>AC@1256:G4=891=53I4FG@7B?8:;ADHC<>62E";
            string actual = OmegaSudokuSolver.Sudoku.Solve(new Board(board));
            Assert.AreEqual(expectedSolution, actual);
        }

        [TestMethod]
        public void Test2For25X25()
        {
            string board = "0000AC0000000000000?00000:0000F0000000000008000900000004000000000000<0000:00000000000000A000000000000C00000000000000000000060000000000000000000E000000000000>00000000000000000000000000000;00000000:00000000D000000000000030000000000C000000000000000000G0000000000000@0000000000002000000000000000?0000000000000000400000000000000000;0000070000800000000000000:000000000000000500000000000000D000000H000000000000F00000000000000000000000060000000000000000?00000000000080000000000000000E0000000000007000=0000<00000000000000H00000000020000000000000@00000D000000000000000000G000000000000?000000000000>000000000009000000000000000@000001000";
            string expectedSolution = "=F;3AC<625H8:@IB>9D?7EG14:5DH2FAG3B><6;EC7184I?9@=BE7I>4@8=DC?F19AG;<62H3:5?9<46:I1;>G27A=EH3@5CD8FB8C@G1?7H9EB34D5:F2=IA;>6<;:69G3C2<F@7BH8ID5E>=A4?17A=8FG>;:14DE5<?B@C93I6H2IH15?=4B@93;2C>GAF6<:7E8D4@E<DA85?7:1GI6;=H329BC>F>23BCHDEI6A=?9F1:847<@5G;A6CEI;2:F85>@BH=3<7D14?9G2D8795G@1CIE=<34?A;F>6:BHHGB@<D=I4?9:12A68C>E;5F735;?1=>67A3FC8G49I:HBE2D<@F4:>3BE9H<;6D?72@G518=ACIC<2:;IF4DA895>@H6?13BG=E79>GF8<5=B@?HIE2D47AC631;:D=I6@793EG14;:C<2>B8?FH5A375?41H>8;6A<=BFEI:GD9@2CE1HAB6:?C2DF37G5;=9@4><I8@3AC:91F74EIH8D>5B?;G<2=61?F258BC>I=@96;3<DGAH:74E<I>DHE;A5:2GC41796F=@8B3?6B4;7@?DG=<5>3:81E2HFCIA9G89=E23<6H7BAF?@C4I:51;D>";
            string actual = OmegaSudokuSolver.Sudoku.Solve(new Board(board));
            Assert.AreEqual(expectedSolution, actual);
        }

        [TestMethod]
        public void Test3For25X25()
        {
            string board = "0000AB0000100000000?00000:0000G0000000200009000000000008000000000000<0000:00000000000000A000000000000C00000000000000000000060000000:00000000000E000000000000=000000000000000<>?70000000000;00000000:00000000D000000000000030000000000C000000000000000000G0000000000000@0000000000002000000000003000?0000000000000000400000000001000000;0000070000900000000000000:000000000000000500000000000000D000000H000000000000F00000000000000000000000060000000000000?000000000000@0000000000000000E000000000000?000=0000<00000000000000H00000000020000000000000@00000D000000000000000000G000000000000?000000000000>000000000009000000000000000=000001000000";
            string expectedSolution = "3759AB@4<61:;=G8>2H?DECFI:6E>;GAH=C8DF2517I9@34B?<=1H4?82>7;9I6BC3DF<EAG5:@FI<DG:19?34>EA@56B=C7;8H28C@B2DEF5IH?7<3AG;4:=196>;?62I>:G3@=5D84<H1E7CBA9FH:G@3;=DE4A91CBF8526I7<>?754=9<HA8BF;2I6GCD?>:@1E3<>1ADC76F?:GH@EBI93;8=425EBF8C192I5<3?>7:=A@4H6DG;IF7163G5B9;=@D2E<>8H4:?AC29AC8HI@:=5F361;?4DBE>G<75=DG>?F<4E7A:H829C61@I3;B4;?3BA87>1EC9G<@:=FI52HD6@H:<E26C;DI4B?>73G5AF8=19C32:@9>=DG6<8;AH1E75?FIB4?A=F1E;BH<D2549I@8>36C:7GGD;674C81:3EIFH=2?B9><@5A98I5<@?327>BC1:4A6GF;DE=H>EBH4F5I6A?@G7=D;:C<932816GC;:=D19H@743F?E<A2B5>I8129?=7<E@FB6>5DC4HI8GA;3:A@3EF54:G82H<9I>B7;=1?6CDB<87HI3?C>G1AE;65@:D29F4=D4>I56B;A2C8=:?9F31G<H7@E";
            string actual = OmegaSudokuSolver.Sudoku.Solve(new Board(board));
            Assert.AreEqual(expectedSolution, actual);
        }

        [TestMethod]
        public void Test4For25X25()
        {
            string board = "00009=0000100000000;00000:0000G0000000200009000000000008000000000000<0000:000000000>0000A000000000000C0000000000B000000000060000000:00000000000H000000000000=000000000000000<>?E0000000000;00000000:00000000D000000000000030000000000C00000000000E000000G0000000000000@0000000700002000000000003000?000000000<000000400000000001000000;0000070000900000000000000:000000000000000500000000000000D000000H000000000000F0000000000000;000000000060000000000000?000000000000@0000000000000000E000000000000?000=0000>00000000000000H00000000020000000000000@00000D000000000000000000G000000600000?0000000000002000008000009000000000000000=000001000000";
            string expectedSolution = "BD6<9=F2:513>E@CHG?;87AI4:7F5;G@EHA6=D281I394><B?C@32G>8BDCI9F?;476A<E=H1:51?=H49<6>7C:IAG5F8B@D32;E8CEAI?;134<HB572:=>D9G@6F<@523>:GA8=B64I;D1H?EF9C76:A87H=3B9EDC@5G42FI1;<>?EG?=HD4I618;<F2>7@C9:B5A3F19BDEC<7;>?GHA:86354=I2@>4;IC2?5F@:9173<EB=AHD8G64A1C6:2>=GD5@BF3;E8H7I?9<2BHEF59C<D;73=>@?I6GA1:489<738;H@4EI2:6?=>DA1C5FBG=;>?5AI71FGE98HBC4:<326@DGI:D@36?8BA14<C9275F;>=EHCE3:2<GAD=B@5>;H1FI6?47897=@F<619E?48HD:A3;2BGC>5ID8B6G45HI>FA791E=?@C<:;32?54>1@7B;:3I2C6D9<G8FAEH=H9I;AC8F23?<EG=45:7>@6D1B56C7:FD=9H@481B?G>;2IE3<AAF<9=1>4@C26;?DIBHE358G7:32D1EIA8G<5>F:96@C47B?H=;;>G@B73:?2HCAIE8<5D=694F1IH84?BE;567G=3<FA91:2@CD>";
            string actual = OmegaSudokuSolver.Sudoku.Solve(new Board(board));
            Assert.AreEqual(expectedSolution, actual);
        }

        [TestMethod]
        public void Test5For25X25()
        {
            string board = "0000AB0;001000=0007?00000:000020000000>0000900000000000800000000000040000:000000000G0000A00000H000000C000=0000000000000000060000000:00000000000E000000000000=0000000000000003>B20000000000;00000000:00000000D000000000000030000000000C000000000000000000G0000000100000@0000000000006000000000003000:0000000000000000400000000001000000;0000070000800000000000000:000000000000G00500000000000000D000000H0000000C0000F000000000000000000000000600000000000@0000400000000000080000000000000000E000000000000C000=0000<00000000000000H00000000020000000100000@00000D0000=0000000000000G000000000000?000000000000>000000000009000000000000000=000001000";
            string expectedSolution = "<EHDAB6;:I18C@=52G7?3F94>:?8762HDF4<5I>3A=;9CBEG1@@G5I18AC>9?FBD;6E34<=2H:7=4B2;@73G<:6EA98F>1HC5?DI3CF9>=?1E5H24G7:IB@D8A;6<B64=85:FI;>C13@2?HEG9D7<A?:I<5D=G2@896HF471CAE;3>B23@GH>4A?BD;7EI9<6=8:CF51>7E1D9CH<6G4AB?F;:35@=I28;F9AC38E172:=5<I>@DB?64GHIDC8FE195G67@:>;3?H=2<AB462?4<;@B=C9I315E:A>7HG8FD5H=E7<D842;?GFABC961I:>@3A;G>3:I76HE=8<BD@42F19C?519:@B?3>AFCHD24G8<5I;76=E4I35?FE<D=@>;81H67G9AB:C2C@AF=HG57?B3:I6<1284D>E9;H><69CB:3A7E5=2@DF?;481IGD1;:G62@8>F<94HCBIAE7?53=E87B24;I91AD?CG>5=:36@<HFFA6CEI<=;D31H98?G5B@>427:85>;:192B34@<?E7HDF6GI=AC7B2HIA54@E=GF6:19C;><3D8?G=1?@7F6C:IA>;D348<25HBE99<D34G>?H85B27C=AEI:F1@;6";
            string actual = OmegaSudokuSolver.Sudoku.Solve(new Board(board));
            Assert.AreEqual(expectedSolution, actual);
        }

        //duplicate elements in row
        [TestMethod]
        public void DuplicateElementsInRowExceptionFor25X25()
        {
            string board = "0000AB0;0010A0=0007?00000:000020000000>0000900000000000800000000000040000:000000000G0000A00000H000000C000=0000000000000000060000000:00000000000E000000000000=0000000000000003>B20000000000;00000000:00000000D000000000000030000000000C000000000000000000G0000000100000@0000000000006000000000003000:0000000000000000400000000001000000;0000070000800000000000000:000000000000G00500000000000000D000000H0000000C0000F000000000000000000000000600000000000@0000400000000000080000000000000000E000000000000C000=0000<00000000000000H00000000020000000100000@00000D0000=0000000000000G000000000000?000000000000>000000000009000000000000000=000001000";
            Assert.ThrowsException<DuplicateElementsException>(() => Sudoku.Solve(new Board(board)));
        }

        //duplicate elements in col
        [TestMethod]
        public void DuplicateElementsInColExceptionFor25X25()
        {
            string board = ":000AB0;001000=0007?00000:000020000000>0000900000000000800000000000040000:000000000G0000A00000H000000C000=0000000000000000060000000:00000000000E000000000000=0000000000000003>B20000000000;00000000:00000000D000000000000030000000000C000000000000000000G0000000100000@0000000000006000000000003000:0000000000000000400000000001000000;0000070000800000000000000:000000000000G00500000000000000D000000H0000000C0000F000000000000000000000000600000000000@0000400000000000080000000000000000E000000000000C000=0000<00000000000000H00000000020000000100000@00000D0000=0000000000000G000000000000?000000000000>000000000009000000000000000=000001000";
            Assert.ThrowsException<DuplicateElementsException>(() => Sudoku.Solve(new Board(board)));
        }

        //duplicate elements in sub square
        [TestMethod]
        public void DuplicateElementsInSubSquareExceptionFor25X25()
        {
            string board = "0000AB0;001000=0007?00000:0A0020000000>0000900000000000800000000000040000:000000000G0000A00000H000000C000=0000000000000000060000000:00000000000E000000000000=0000000000000003>B20000000000;00000000:00000000D000000000000030000000000C000000000000000000G0000000100000@0000000000006000000000003000:0000000000000000400000000001000000;0000070000800000000000000:000000000000G00500000000000000D000000H0000000C0000F000000000000000000000000600000000000@0000400000000000080000000000000000E000000000000C000=0000<00000000000000H00000000020000000100000@00000D0000=0000000000000G000000000000?000000000000>000000000009000000000000000=000001000";
            Assert.ThrowsException<DuplicateElementsException>(() => Sudoku.Solve(new Board(board)));
        }
    }
}
