using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using OmegaSudokuSolver;

namespace OmegaSudokuTester
{
    [TestClass]
    public class TestsFor16X16
    {
        [TestMethod]
        public void TestEmpty16X16()
        {
            string board = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
            string expectedSolution = "123456789:;<=>?@?=@714;<368>29:5<;:>2=9?145@368768593:>@27?=14;<9123?@475<>8:;6=:6?;815=@34972<>>@<=926;?17:53484578>3<:=26;@19?3?127<84:>@6;=598<=6@?15;934>72:79>@:;268=15?<3454;:=>39<?278@16236145=>78<?9:@;=:8?67@14;93<5>2@>9<;8:265=14?73;745<9?3>@:268=1";
            string actual = OmegaSudokuSolver.Sudoku.Solve(new Board(board));
            Assert.AreEqual(expectedSolution, actual);
        }

        [TestMethod]
        public void Test1For16X16()
        {
            string board = "?000000<00000000=0000000002000000000000000000@000000000000000000000010000000000000800000000000000006000000000:000000003000000?00000000;0000000000000=0000000000>00000000000000000000000070000010000000005000000000000000000000400000000000@000000000900000000000";
            string expectedSolution = "?26873=<@>5941:;=1:7;@9648235>?<43;9?5>8=:1<2@67>@<5214:?;76=9383?4=1:2965<8>7;@2;8>567?9@3:14<=17968<@=>?4;3:25:5@<4;3>12=78?967=?269;481>5<3@:<:14=782;3?@965>563;:>1@<49278=?98>@<?5376:=;2146<=?32:75984@;>18>2:@=<;3761?549;971>4652=@?:<83@45398?1:<;>6=72";
            string actual = OmegaSudokuSolver.Sudoku.Solve(new Board(board));
            Assert.AreEqual(expectedSolution, actual);
        }

        [TestMethod]
        public void Test2For16X16()
        {
            string board = "<=0000000078900000000000000000000000000012300000000000000000000000000000000000000000<>;:00000000000000000000000000000000000000456000000000000000000000000001@000000000000000000000000?@;:000000000000000000000000000000009870000000000000000000000000000000000=>";
            string expectedSolution = "<=:;>12345789?@619?8;45@6:<=37>247@>?96<123;=:58536278:=9>?@;<14;82<96?7@415:>3=@145<>;:7=93628?3>=?45128;:67@9<:679@=38<?>21;456:;42<>13@=958?7?<>76394;851@=2:2@83:7=5?<6>41;9951=8?@;:724>6<3=?965;<>214:837@>23:1@4?=987<56;845@=276>3;<?9:17;<13:8956@?24=>";
            string actual = OmegaSudokuSolver.Sudoku.Solve(new Board(board));
            Assert.AreEqual(expectedSolution, actual);
        }

        [TestMethod]
        public void Test3For16X16()
        {
            string board = "10000000200000000300000000050000000040000006000000700000000@00000=0000000800000000000000000000000090000000000000000000000000000000000><=?@;:120000000000000000000000000800000000000000000300000000000000000000000200000000000010000000000003000000000000@?000000";
            string expectedSolution = "1;6<=9@>243?875:=34>62:<87159;?@25?@4837;9:6<1=>987:15;?<=>@4623:=26<75438@;>?913785@6>;1:?92<4=@49;81?2=>6<35:7<1>?3:=9752468@;46375><=?@;:12895>19:;736248=@<?;?:=2@48><9153768@<29?6153=7:>;479;3><2@418=?:65?2=4;385:67>@91<6<@8?41:9;537=>2>:517=96@?<2;438";
            string actual = OmegaSudokuSolver.Sudoku.Solve(new Board(board));
            Assert.AreEqual(expectedSolution, actual);
        }

        [TestMethod]
        public void Test4For16X16()
        {
            string board = ":;@?=>1<000000000000008000000000000000000000000000007000000000000000000000000000000000000000000000000000600000000000000000000000900000000000000300000000000000000000000000000000000000050000012:4@678900000000000000;:0000000000000004000000000000000000<2>00000";
            string expectedSolution = ":;@?=>1<34278965167<5284?@=9:3;>59=8?3@6:<;>1472234>7;9:5168=@<??4:=@5298>3;761<7852614>@=9<3?:;;>9@<8376?:125=461<3:=?;2745@8>99726><=14:@?5;838?1547:39;<26>@=@:>;2?68=5139<47=<349@;5>876?12:4@6789<2;35:>=?1<581;:>=79?@4236>2;:345?168=<79@3=?9167@<2>4;:58";
            string actual = OmegaSudokuSolver.Sudoku.Solve(new Board(board));
            Assert.AreEqual(expectedSolution, actual);
        }

        [TestMethod]
        public void Test5For16X16()
        {
            string board = "003400789:;<=>?000@714;<36000000<;:>2=9?100@300008593:>@000=14;<9123?@005<>8006=:6?;000=@3497200>@<=926;?17:53404578>3<:=26;000000127<84:>@6;=598<=6@?15;904>70:70>0:;260015?<3454;:=>39<?278@00000000=>78<?9:000:8?67@14;93<5>2@>9<08:265=14?73;745<9?3>@:268=1";
            string expectedSolution = "123456789:;<=>?@?=@714;<368>29:5<;:>2=9?145@368768593:>@27?=14;<9123?@475<>8:;6=:6?;815=@34972<>>@<=926;?17:53484578>3<:=26;@19?3?127<84:>@6;=598<=6@?15;934>72:79>@:;268=15?<3454;:=>39<?278@16236145=>78<?9:@;=:8?67@14;93<5>2@>9<;8:265=14?73;745<9?3>@:268=1";
            string actual = OmegaSudokuSolver.Sudoku.Solve(new Board(board));
            Assert.AreEqual(expectedSolution, actual);
        }

        //duplicate elements in row
        [TestMethod]
        public void DuplicateElementsInRowExceptionFor16X16()
        {
            string board = "003400789:;<=>?300@714;<36000000<;:>2=9?100@300008593:>@000=14;<9123?@005<>8006=:6?;000=@3497200>@<=926;?17:53404578>3<:=26;000000127<84:>@6;=598<=6@?15;904>70:70>0:;260015?<3454;:=>39<?278@00000000=>78<?9:000:8?67@14;93<5>2@>9<08:265=14?73;745<9?3>@:268=1";
            Assert.ThrowsException<DuplicateElementsException>(() => Sudoku.Solve(new Board(board)));
        }

        //duplicate elements in col
        [TestMethod]
        public void DuplicateElementsInColExceptionFor16X16()
        {
            string board = "603400789:;<=>?060@714;<30000000<;:>2=9?100@300008593:>@000=14;<9123?@005<>8006=:6?;000=@3497200>@<=926;?17:53404578>3<:=26;000000127<84:>@6;=598<=6@?15;904>70:70>0:;260015?<3454;:=>39<?278@00000000=>78<?9:000:8?67@14;93<5>2@>9<08:265=14?73;745<9?3>@:268=1";
            Assert.ThrowsException<DuplicateElementsException>(() => Sudoku.Solve(new Board(board)));
        }

        //duplicate elements in sub square
        [TestMethod]
        public void DuplicateElementsInSubSquareExceptionFor16X16()
        {
            string board = "003400789:;<=>?030@714;<06000000<;:>2=9?100@300008593:>@000=14;<9123?@005<>8006=:6?;000=@3497200>@<=926;?17:53404578>3<:=26;000000127<84:>@6;=598<=6@?15;904>70:70>0:;260015?<3454;:=>39<?278@00000000=>78<?9:000:8?67@14;93<5>2@>9<08:265=14?73;745<9?3>@:268=1";
            Assert.ThrowsException<DuplicateElementsException>(() => Sudoku.Solve(new Board(board)));
        }
    }
}
